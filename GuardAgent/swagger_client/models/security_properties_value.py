# coding: utf-8

"""
    First Approach to an GUARD API

    We'll be here writing some things in order to make it work with data  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SecurityPropertiesValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'vendor': 'str',
        'patch': 'str',
        'callback_url': 'str'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'vendor': 'vendor',
        'patch': 'patch',
        'callback_url': 'callback_url'
    }

    def __init__(self, name=None, version=None, vendor=None, patch=None, callback_url=None):  # noqa: E501
        """SecurityPropertiesValue - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._version = None
        self._vendor = None
        self._patch = None
        self._callback_url = None
        self.discriminator = None

        self.name = name
        self.version = version
        self.vendor = vendor
        self.patch = patch
        self.callback_url = callback_url

    @property
    def name(self):
        """Gets the name of this SecurityPropertiesValue.  # noqa: E501


        :return: The name of this SecurityPropertiesValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecurityPropertiesValue.


        :param name: The name of this SecurityPropertiesValue.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this SecurityPropertiesValue.  # noqa: E501


        :return: The version of this SecurityPropertiesValue.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SecurityPropertiesValue.


        :param version: The version of this SecurityPropertiesValue.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and not re.search(r'[0-9]{1,4}.[0-9]{1,4}.[0-9]{1,4}', version):  # noqa: E501
            raise ValueError(r"Invalid value for `version`, must be a follow pattern or equal to `/[0-9]{1,4}.[0-9]{1,4}.[0-9]{1,4}/`")  # noqa: E501

        self._version = version

    @property
    def vendor(self):
        """Gets the vendor of this SecurityPropertiesValue.  # noqa: E501


        :return: The vendor of this SecurityPropertiesValue.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this SecurityPropertiesValue.


        :param vendor: The vendor of this SecurityPropertiesValue.  # noqa: E501
        :type: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    @property
    def patch(self):
        """Gets the patch of this SecurityPropertiesValue.  # noqa: E501


        :return: The patch of this SecurityPropertiesValue.  # noqa: E501
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this SecurityPropertiesValue.


        :param patch: The patch of this SecurityPropertiesValue.  # noqa: E501
        :type: str
        """
        if patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")  # noqa: E501

        self._patch = patch

    @property
    def callback_url(self):
        """Gets the callback_url of this SecurityPropertiesValue.  # noqa: E501


        :return: The callback_url of this SecurityPropertiesValue.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this SecurityPropertiesValue.


        :param callback_url: The callback_url of this SecurityPropertiesValue.  # noqa: E501
        :type: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501

        self._callback_url = callback_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityPropertiesValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityPropertiesValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
