# coding: utf-8

"""
    First Approach to an GUARD API

    We'll be here writing some things in order to make it work with data  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GuardAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'configuration_properties': 'ConfigurationProperties',
        'security_properties': 'SecurityProperties',
        'data_schema': 'DataSchema'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'configuration_properties': 'configuration_properties',
        'security_properties': 'security_properties',
        'data_schema': 'data_schema'
    }

    def __init__(self, id=None, type=None, configuration_properties=None, security_properties=None, data_schema=None):  # noqa: E501
        """GuardAgent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._configuration_properties = None
        self._security_properties = None
        self._data_schema = None
        self.discriminator = None

        self.id = id
        self.type = type
        self.configuration_properties = configuration_properties
        self.security_properties = security_properties
        self.data_schema = data_schema

    @property
    def id(self):
        """Gets the id of this GuardAgent.  # noqa: E501


        :return: The id of this GuardAgent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GuardAgent.


        :param id: The id of this GuardAgent.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this GuardAgent.  # noqa: E501


        :return: The type of this GuardAgent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GuardAgent.


        :param type: The type of this GuardAgent.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def configuration_properties(self):
        """Gets the configuration_properties of this GuardAgent.  # noqa: E501


        :return: The configuration_properties of this GuardAgent.  # noqa: E501
        :rtype: ConfigurationProperties
        """
        return self._configuration_properties

    @configuration_properties.setter
    def configuration_properties(self, configuration_properties):
        """Sets the configuration_properties of this GuardAgent.


        :param configuration_properties: The configuration_properties of this GuardAgent.  # noqa: E501
        :type: ConfigurationProperties
        """
        if configuration_properties is None:
            raise ValueError("Invalid value for `configuration_properties`, must not be `None`")  # noqa: E501

        self._configuration_properties = configuration_properties

    @property
    def security_properties(self):
        """Gets the security_properties of this GuardAgent.  # noqa: E501


        :return: The security_properties of this GuardAgent.  # noqa: E501
        :rtype: SecurityProperties
        """
        return self._security_properties

    @security_properties.setter
    def security_properties(self, security_properties):
        """Sets the security_properties of this GuardAgent.


        :param security_properties: The security_properties of this GuardAgent.  # noqa: E501
        :type: SecurityProperties
        """
        if security_properties is None:
            raise ValueError("Invalid value for `security_properties`, must not be `None`")  # noqa: E501

        self._security_properties = security_properties

    @property
    def data_schema(self):
        """Gets the data_schema of this GuardAgent.  # noqa: E501


        :return: The data_schema of this GuardAgent.  # noqa: E501
        :rtype: DataSchema
        """
        return self._data_schema

    @data_schema.setter
    def data_schema(self, data_schema):
        """Sets the data_schema of this GuardAgent.


        :param data_schema: The data_schema of this GuardAgent.  # noqa: E501
        :type: DataSchema
        """
        if data_schema is None:
            raise ValueError("Invalid value for `data_schema`, must not be `None`")  # noqa: E501

        self._data_schema = data_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GuardAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuardAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
