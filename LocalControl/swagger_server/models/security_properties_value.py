# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util
import re

class SecurityPropertiesValue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, version: str=None, vendor: str=None, patch: str=None, callback_url: str=None):  # noqa: E501
        """SecurityPropertiesValue - a model defined in Swagger

        :param name: The name of this SecurityPropertiesValue.  # noqa: E501
        :type name: str
        :param version: The version of this SecurityPropertiesValue.  # noqa: E501
        :type version: str
        :param vendor: The vendor of this SecurityPropertiesValue.  # noqa: E501
        :type vendor: str
        :param patch: The patch of this SecurityPropertiesValue.  # noqa: E501
        :type patch: str
        :param callback_url: The callback_url of this SecurityPropertiesValue.  # noqa: E501
        :type callback_url: str
        """
        self.swagger_types = {
            'name': str,
            'version': str,
            'vendor': str,
            'patch': str,
            'callback_url': str
        }

        self.attribute_map = {
            'name': 'name',
            'version': 'version',
            'vendor': 'vendor',
            'patch': 'patch',
            'callback_url': 'callback_url'
        }

        self._name = name
        self._version = version
        self._vendor = vendor
        self._patch = patch
        self._callback_url = callback_url

    @classmethod
    def from_dict(cls, dikt) -> 'SecurityPropertiesValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The security_properties_value of this SecurityPropertiesValue.  # noqa: E501
        :rtype: SecurityPropertiesValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this SecurityPropertiesValue.


        :return: The name of this SecurityPropertiesValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SecurityPropertiesValue.


        :param name: The name of this SecurityPropertiesValue.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self) -> str:
        """Gets the version of this SecurityPropertiesValue.


        :return: The version of this SecurityPropertiesValue.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this SecurityPropertiesValue.


        :param version: The version of this SecurityPropertiesValue.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and not re.search(r'[0-9]{1,4}.[0-9]{1,4}.[0-9]{1,4}', version):  # noqa: E501
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/[0-9]{1,4}.[0-9]{1,4}.[0-9]{1,4}/`")  # noqa: E501

        self._version = version

    @property
    def vendor(self) -> str:
        """Gets the vendor of this SecurityPropertiesValue.


        :return: The vendor of this SecurityPropertiesValue.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor: str):
        """Sets the vendor of this SecurityPropertiesValue.


        :param vendor: The vendor of this SecurityPropertiesValue.
        :type vendor: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    @property
    def patch(self) -> str:
        """Gets the patch of this SecurityPropertiesValue.


        :return: The patch of this SecurityPropertiesValue.
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch: str):
        """Sets the patch of this SecurityPropertiesValue.


        :param patch: The patch of this SecurityPropertiesValue.
        :type patch: str
        """
        if patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")  # noqa: E501

        self._patch = patch

    @property
    def callback_url(self) -> str:
        """Gets the callback_url of this SecurityPropertiesValue.


        :return: The callback_url of this SecurityPropertiesValue.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url: str):
        """Sets the callback_url of this SecurityPropertiesValue.


        :param callback_url: The callback_url of this SecurityPropertiesValue.
        :type callback_url: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501

        self._callback_url = callback_url
